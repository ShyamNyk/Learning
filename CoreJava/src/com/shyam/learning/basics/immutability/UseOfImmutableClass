#Use of Immutable class
1) immutable objects can safely be shared among multiple threads as they are threadsafe by default
There are various reason for immutability:

1)Thread Safety: Immutable objects cannot be changed nor can its internal state change, 
thus there's no need to synchronise it.
2)It also guarantees that whatever I send through (through a network) has to come in the same state 
as previously sent. It means that nobody (eavesdropper) can come and add random data in my immutable set.
3)It's also simpler to develop. You guarantee that no subclasses will exist if an object is immutable. 
E.g. a String class.

4)Immutable objects are good Map keys and Set elements, since these typically do not change once created.

5) These are used for caching purpose 
So, if you want to send data through a network service, and you want a sense of guarantee that 
you will have your result exactly the same as what you sent, set it as immutable.

-- Which type of cloning do we do in case of immutability
 It is deep cloning 
 
-- Why the strings are immutable in java 
The string is Immutable in Java because String objects are cached in the 
String pool. Since cached String literals are shared between multiple clients there 
is always a risk, where one client's action would affect all another client. 
For example, if one client changes the value of the String "Test" to "TEST", 
all other clients will also see that value as explained in the first example. 
Since caching of String objects was important from performance reason this risk 
was avoided by making String class Immutable. At the same time, String was made 
final so that no one can compromise invariant of String class like Immutability, 
Caching, hashcode calculation, etc by extending and overriding behaviors. 
Another reason why String class is immutable could die due to HashMap.
Since Strings are very popular as the HashMap key, it's important for them to be immutable so that they can retrieve the value object which was stored in HashMap. Since HashMap works in the principle of hashing, which requires the same has value to function properly. Mutable String would produce two different hashcodes at the time of insertion and retrieval if contents of String was modified after insertion, potentially losing the value object in the map


