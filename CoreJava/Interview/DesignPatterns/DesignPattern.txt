Factory:- Define an interface or abstract class for creating an object but let the subclasses decide which class to instantiate
It promotes the loose-coupling by eliminating the need to bind application-specific classes into the code

Abstract Factory Pattern: It is a factory of factories

SingleTone: This pattern involves a single class which is responsible to create an object while making sure that only single object gets created

ProtoType: cloning of an existing object instead of creating new one and can also be customized as per the requirement.

Biulder: Builder pattern builds a complex object using simple objects and using a step by step approach

Object Pool Pattern: To reuse the object that are expensive to create. Object pool design pattern is essentially used in Web Container of the server for creating thread pools and data source pools to process the requests.

-------------------
Adapter Interface: Adapter pattern works as a bridge between two incompatible interfaces. This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. A real life example could be a case of card reader which acts as an adapter between memory card and a laptop. You plugin the memory card into card reader and card reader into the laptop so that memory card can be read via laptop.

Bridge Pattern: Bridge is used when we need to decouple an abstraction from its implementation so that the two can vary independently

Composite Pattern: Composite pattern is used where we need to treat a group of objects in similar way as a single object. Composite pattern composes objects in term of a tree structure to represent part as well as whole hierarchy. This pattern creates a class that contains group of its own objects. This class provides ways to modify its group of same objects.

Decorator Design Pattern: Decorator pattern allows a user to add new functionality to an existing object without altering its structure.
This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact

Flyweight Design Pattern:Flyweight pattern tries to reuse already existing similar kind objects by storing them and creates new object when no matching object is found

Facade Design Pattern: Facade pattern hides the complexities of the system and provides an interface to the client using which the client can access the system. This pattern involves a single class which provides simplified methods required by client and delegates calls to methods of existing system classes

Proxy Interface: In proxy pattern, a class represents functionality of another class.

-------------------------
Chain Of Responsibility: the chain of responsibility pattern creates a chain of receiver objects for a request.In this pattern, normally each receiver contains reference to another receiver. If one object cannot handle the request then it passes the same to the next receiver and so on. Logging is an example of this kind of interface

Interpreter Pattern: Interpreter pattern provides a way to evaluate language grammar or expression.This pattern is used in SQL parsing, symbol processing engine etc.

Iterator Pattern: access the elements of a collection object in sequential manner without any need to know its underlying representation.

Obeserver Pattern: Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its depenedent objects are to be notified automatically

Momento Pattern: A Memento Pattern says that "to restore the state of an object to its previous state". But it must do this without violating Encapsulation. Such case is useful in case of error or failure.Memento pattern is used to restore state of an object to a previous state

State Design Pattern: In State pattern a class behavior changes based on its state

Strategy pattern:, a class behavior or its algorithm can be changed at run time. This type of design pattern comes under behavior pattern.
In Strategy pattern, we create objects which represent various strategies and a context object whose behavior varies as per its strategy object. The strategy object changes the executing algorithm of the context object.

Template pattern: an abstract class exposes defined way(s)/template(s) to execute its methods. Its subclasses can override the method implementation as per need but the invocation is to be in the same way as defined by an abstract class

Mediator pattern: is used to reduce communication complexity between multiple objects or classes. This pattern provides a mediator class which normally handles all the communications between different classes and supports easy maintenance of the code by loose coupling. Mediator pattern falls under behavioral pattern category.


